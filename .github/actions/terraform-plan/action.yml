name: "Terraform Plan"
description: "Terraform Plan Composite Action"
inputs:
  AWS_ACCOUNT:
    required: true
    description: "AWS Account ID"
  AWS_IAM_ROLE:
    required: true
    description: "AWS GitHub Actions IAM Role"
  WORKLOADS_PAT:
    required: true
    description: "GitHub Personal Access Token"
  GITHUB_TOKEN:
    required: true
    description: "GitHub Repository Token"
  deploy:
    required: true
    description: "Desired state for the deployment. true=deploy | false=destroy"
  aws-region:
    required: true
    description: "AWS Region"
  team:
    required: true
    description: "Team Name"
  environment:
    required: true
    description: "Environment Name"
  deployment-id:
    required: true
    description: "Deployment ID"
  cluster-var-file:
    required: true
    description: "Cluster .tfvars file"
  init-outcome:
    required: true
    description: "Terraform init command outcome"
  workloads-ref:
    required: true
    default: "main"
    description: "Argo CD Workloads Target Revision"
outputs:
  exitcode:
    description: "Terraform Plan Exit code"
    value: ${{ steps.plan.outputs.exitcode }}
runs:
  using: "composite"
  steps:
    - name: Terraform Format and style
      id: fmt
      continue-on-error: true
      shell: bash
      run: terraform fmt -check -diff -recursive
    - name: Terraform Validate
      id: validate
      continue-on-error: true
      shell: bash
      run: terraform validate -no-color
    - name: Define Terraform Plan Command # Deploy or Destroy
      id: tf_plan_command
      shell: bash
      run: |
        if ${{ inputs.deploy }}
        then
          echo "PLAN_COMMAND=terraform plan" >> $GITHUB_OUTPUT
        else
          echo "PLAN_COMMAND=terraform plan -destroy" >> $GITHUB_OUTPUT
        fi
    - name: Terraform Plan
      id: plan
      continue-on-error: true
      shell: bash
      run: |
        ${{ steps.tf_plan_command.outputs.PLAN_COMMAND }} \
          -var-file="./clusters/${{ inputs.cluster-var-file }}" \
          -var="team_name=${{ inputs.team }}" \
          -var="environment=${{ inputs.environment }}" \
          -var="cluster_id=${{ inputs.deployment-id }}" \
          -var="region=${{ inputs.aws-region }}" \
          -var="workloads_pat=${{ inputs.WORKLOADS_PAT }}" \
          -var="workloads_target_revision=${{ inputs.workloads-ref }}" \
          -detailed-exitcode \
          -out=tfplan
    - name: Terraform Plan Output
      id: plan_output
      shell: bash
      run: |
        terraform show \
          -no-color tfplan \
          >${GITHUB_WORKSPACE}/tfplan.out
    - name: Comment Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan_output.outputs.stdout }}"
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('${{ github.workflow }} ${{ inputs.environment }}')
          })

          // 2. Prepare format of the comment
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('tfplan.out', 'utf8')
          const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
          const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""

          const output = `## ${{ github.workflow }} - ${{ inputs.environment }} - Cluster eks-${{ inputs.team }}-${{ inputs.environment }}-${{ inputs.deployment-id }}
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ inputs.init-outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${plan}
          \`\`\`

          </details>
          ${truncated_message}

          #### Update kubeconfig command: \`aws eks --region ${{ inputs.aws-region }} update-kubeconfig --name eks-${{ inputs.team }}-${{ inputs.environment }}-${{ inputs.deployment-id }}\`

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }} ${{ inputs.environment }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
    - name: Terraform Plan Status
      if: steps.plan.outputs.exitcode == 1 ||
          steps.fmt.outputs.exitcode != 0 ||
          steps.fmt.outputs.exitcode != 0
      shell: bash
      run: exit 1
    - name: Copy Terraform Plan to Cache
      uses: actions/cache@v3
      if: inputs.deploy
      with:
        path: tfplan
        key: tfplan-${{ inputs.environment }}-${{ github.run_id }}-${{ github.run_attempt }}
