name: "Terraform Plan"
description: "Terraform Plan Composite Action"
inputs:
  AWS_ACCOUNT:
    required: true
    description: "AWS Account ID"
  AWS_IAM_ROLE:
    required: true
    description: "AWS GitHub Actions IAM Role"
  WORKLOADS_PAT:
    required: true
    description: "GitHub Personal Access Token"
  GITHUB_TOKEN:
    required: true
    description: "GitHub Repository Token"
  deploy:
    required: true
    description: "Desired state for the deployment. true=deploy | false=destroy"
  aws-region:
    required: true
    description: "AWS Region"
  s3-bucket:
    required: true
    description: "Terraform State S3 Bucket"
  team:
    required: true
    description: "Team Name"
  environment:
    required: true
    description: "Environment Name"
  deployment-id:
    required: true
    description: "Deployment ID"
outputs:
  exitcode:
    description: "Terraform Plan Exit code"
    value: ${{ steps.plan.outputs.exitcode }}
  cluster_id:
    description: "EKS Cluster ID"
    value: ${{ steps.tf_args.outputs.CLUSTER_ID }}
runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT }}:role/${{ inputs.AWS_IAM_ROLE }}
        role-session-name: eksrolesession
        aws-region: ${{ inputs.aws-region }}
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_hostname: ''
    - name: Terraform Format and style
      id: fmt
      shell: bash
      run: terraform fmt -check -diff -recursive
      continue-on-error: true
    - name: Define Terraform Arguments
      id: tf_args
      shell: bash
      run: |
        if ${{ inputs.deploy }}
        then
          echo "PLAN_COMMAND=terraform plan" >> $GITHUB_OUTPUT
        else
          echo "PLAN_COMMAND=terraform plan -destroy" >> $GITHUB_OUTPUT
        fi

        if [[ ${{ inputs.deployment-id }} == ${{ github.head_ref }} ]]
        then
          echo "CLUSTER_VAR_FILE=pr-test.tfvars"  >> $GITHUB_OUTPUT
          DEPLOYMENT_ID=$(echo ${{ inputs.deployment-id }} | sed 's@.*/@@')
          echo "CLUSTER_ID=${DEPLOYMENT_ID}"  >> $GITHUB_OUTPUT
        else
          echo "CLUSTER_VAR_FILE=${{ inputs.team }}-${{ inputs.environment }}-${{ inputs.deployment-id }}.tfvars"  >> $GITHUB_OUTPUT
          echo "CLUSTER_ID=${{ inputs.deployment-id }}"  >> $GITHUB_OUTPUT
        fi
    - name: Terraform Init
      id: init
      shell: bash
      run: |
        echo ${{ steps.tf_args.outputs.CLUSTER_ID }}
        terraform init \
          -backend-config="bucket=${{ inputs.s3-bucket }}" \
          -backend-config="key=${{ inputs.team }}-${{ inputs.environment }}-${{ steps.tf_args.outputs.CLUSTER_ID }}/tfstate" \
          -backend-config="region=${{ inputs.aws-region }}"
    - name: Terraform Validate
      id: validate
      shell: bash
      run: terraform validate -no-color
    - name: Terraform Plan
      id: plan
      continue-on-error: true
      shell: bash
      run: |
        ${{ steps.tf_args.outputs.PLAN_COMMAND }} \
          -var-file="./clusters/${{ steps.tf_args.outputs.CLUSTER_VAR_FILE }}" \
          -var="team_name=${{ inputs.team }}" \
          -var="environment=${{ inputs.environment }}" \
          -var="cluster_id=${{ steps.tf_args.outputs.CLUSTER_ID }}" \
          -var="region=${{ inputs.aws-region }}" \
          -var="workloads_pat=${{ inputs.WORKLOADS_PAT }}" \
          -detailed-exitcode \
          -out=tfplan
    - name: Terraform Plan Output
      id: plan_output
      shell: bash
      run: |
        terraform show \
          -no-color tfplan \
          >${GITHUB_WORKSPACE}/tfplan.out
    - name: Terraform Plan Status
      if: steps.plan.outputs.exitcode == 1
      shell: bash
      run: exit 1
    - name: Upload Plan to S3
      shell: bash
      run: |
        aws s3 cp tfplan \
          s3://${{ inputs.s3-bucket }}/${{ inputs.team }}-${{ inputs.environment }}-${{ steps.tf_args.outputs.CLUSTER_ID }}/tfplan
    - name: Comment Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan_output.outputs.stdout }}"
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('${{ github.workflow }} ${{ inputs.environment }}')
          })

          // 2. Prepare format of the comment
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('tfplan.out', 'utf8')
          const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
          const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""

          const output = `## ${{ github.workflow }} ${{ inputs.environment }}
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${plan}
          \`\`\`

          </details>
          ${truncated_message}

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }} ${{ inputs.environment }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
    - name: Disable Terraform Wrapper
      if: github.ref_name == 'main' && steps.plan.outputs.exitcode == 2
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_hostname: ''
        terraform_wrapper: false
